<?php

/**
* Implements hook_menu().
*/

function hologram_menu(){
  $items['hologram/upload'] = array(
    'page callback' => 'hologram_upload',
    'access arguments' => array('administer media'),
  );

  return $items;
}

/**
* Implements files API of hologram widget.
*/

function hologram_upload(){
  header('Content-type:application/json;charset=utf-8');
  $request = file_get_contents('php://input');
  $file = json_decode($request);

  if($file){
    $data = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $file->preview));

    try{
      $file_data = file_save_data($data, 'public://' . $file->name, FILE_EXISTS_REPLACE);
      $uploaded_file = array(
        'key'=> $file->key,
        'fid'=> $file_data->fid,
        'name' => $file->name,
        'size' => $file->size,
        'uploaded_date'=> (new DateTime())->getTimestamp(),
      );
      echo json_encode(array(
        'status' => 'success',
        'message' => 'Upload success.',
        'data' => $uploaded_file,
      ), JSON_UNESCAPED_UNICODE);
    }catch(Exception $e){
      echo json_encode(array(
        'status' => 'error',
        'message' => 'Upload failed.',
        'error' => $e,
      ));
    }
  } else {
    echo json_encode(array(
      'status' => 'error',
      'message' => 'Upload failed.',
      'error' => 'No file found in the upload',
    ));
  }
  exit();
}

/**
* Implements hook_field_widget_info().
*/
function hologram_field_widget_info(){
  return array(
    'hologram_image' => array(
      'label' => t('Hologram'),
      'field types' => array('image'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    )
  );
}

/**
* Implements hook_field_widget_form().
*
*/
function hologram_field_widget_form($form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $upload_path = '/' . variable_get('file_public_path', conf_path() . '/files/');
  $settings = array('Hologram' => array());

  //Pass entity type to form state
  $form_state['storage']['instance'] = $instance;

  $element['#attached']['js'] = array(
    drupal_get_path('module', 'hologram') . '/hologram/dist/bundle.js',
    drupal_get_path('module', 'hologram') . '/js/widget.js',
  );

  $element['#attached']['css'] = array(
    drupal_get_path('module', 'hologram') . '/css/hologram_widget.css',
    drupal_get_path('module', 'hologram') . '/hologram/dist/css/hologram.css',
  );

  //Add file extension from setting
  $extensions = explode(' ', $instance['settings']['file_extensions']);
  $extensions_setting = array();
  foreach($extensions as $extension){
    $extension = 'image/' . $extension;
    array_push($extensions_setting, $extension);
  }
  $extensions_setting = implode(',', $extensions_setting);

  //Add hologram setting to widget
  $element['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array('Hologram' => array(
      'file_extensions' => $extensions_setting,
      'uploadPath' => $upload_path,
      'uploaderUrl' => url('hologram/upload'),
      'acceptType' => $extensions_setting,
      'maxFiles' => (int)$field['cardinality'],
      'enableAlt' => $instance['settings']['alt_field'],
      'enableTitle' => $instance['settings']['title_field'],
    )
  ),
);

if($instance['settings']['max_filesize']){
  $max_filesize = (int)$instance['settings']['max_filesize'];
  $settings['Hologram']['maxFileSize'] = $max_filesize;
}

if($instance['widget']['settings']['min_width']){
  $min_width = (int)$instance['widget']['settings']['min_width'];
  $settings['Hologram']['minWidth'] = $min_width;
}

if($instance['widget']['settings']['max_width']){
  $max_width = (int)$instance['widget']['settings']['max_width'];
  $settings['Hologram']['maxWidth'] = $max_width;
}

if($instance['widget']['settings']['min_height']){
  $min_height = (int)$instance['widget']['settings']['min_height'];
  $settings['Hologram']['minHeight'] = $min_height;
}

if($instance['widget']['settings']['max_height']){
  $max_height = (int)$instance['widget']['settings']['max_height'];
  $settings['Hologram']['maxHeight'] = $max_height;
}

if($instance['widget']['settings']['aspect']){
  $aspect = explode('/', $instance['widget']['settings']['aspect']);
  $aspect = (int)$aspect[0] / (int)$aspect[1];
  $settings['Hologram']['aspect'] = $aspect;
}

if(!empty($items)){
  $images = array();
  foreach($items as $item){
    $image = array(
      'key'=> uniqid(),
      'fid' => $item['fid'],
      'name' => $item['filename'],
      'preview_url' => file_create_url($item['uri']),
    );
    if(isset($item['alt'])){
      $image['alt'] = $item['alt'];
      $image['title'] = $item['title'];
    }
    array_push($images, $image);
  }
  $item_json = json_encode($images);
}

$element['value'] = array(
  'image_data' => array(
    '#title' => $element['#title'],
    '#type' => 'textfield',
    '#element_validate' => array('_hologram_field_vaildate'),
    '#default_value' => isset($item_json) ? $item_json : '',
    '#attributes' => array('id  ' => 'hologram-image-data'),
    '#maxlength' => 4096,
  ),
  'hologram' => array(
    '#title'=> $element['#title'],
    '#type' => 'markup',
    '#markup' => '<div class="hologram-area"></div>',
  ),
);

if($instance['required']){
  $element['value']['image_data']['#required'] = 'TRUE';
}

return $element;
}

function hologram_field_widget_settings_form($field, $instance){
  $element = array(
    'min_width' => array(
      '#type' => 'textfield',
      '#title' => t('Minimum Crop Width'),
      '#field_suffix' => '%',
      '#description' => t('A minimum crop width, as a percentage of the image width.'),
      '#element_validate' => array('element_validate_integer_positive', 'hologram_width_height_validate'),
      '#default_value' => isset($instance['widget']['settings']['min_width']) ? $instance['widget']['settings']['min_width'] : '',
    ),
    'max_width' => array(
      '#type' => 'textfield',
      '#title' => t('Max Crop Width'),
      '#field_suffix' => '%',
      '#description' => t('A maximum crop width, as a percentage of the image width.'),
      '#element_validate' => array('element_validate_integer_positive', 'hologram_width_height_validate'),
      '#default_value' => isset($instance['widget']['settings']['max_width']) ? $instance['widget']['settings']['max_width'] : '',
    ),
    'min_height' => array(
      '#type' => 'textfield',
      '#title' => t('Minimum Crop Height'),
      '#field_suffix' => '%',
      '#description' => t('A minimum crop height, as a percentage of the image height.'),
      '#element_validate' => array('element_validate_integer_positive', 'hologram_width_height_validate'),
      '#default_value' => isset($instance['widget']['settings']['min_height']) ? $instance['widget']['settings']['min_height'] : '',
    ),
    'max_height' => array(
      '#type' => 'textfield',
      '#title' => t('Max Crop Height'),
      '#field_suffix' => '%',
      '#description' => t('A maximum crop height, as a percentage of the image height.'),
      '#element_validate' => array('element_validate_integer_positive', 'hologram_width_height_validate'),
      '#default_value' => isset($instance['widget']['settings']['max_height']) ? $instance['widget']['settings']['max_height'] : '',
    ),
    'aspect' => array(
      '#type' => 'textfield',
      '#title' => t('Aspect'),
      '#element_validate' => array('_hologram_check_aspect'),
      '#description' => t('The aspect of cropped image. Example: 16/9'),
      '#default_value' => isset($instance['widget']['settings']['aspect']) ? $instance['widget']['settings']['aspect'] : '',
    ),
  );
  return $element;
}

function hologram_width_height_validate($element, &$form_state){
  $value = (int)$element['#value'];
  if($value > 100){
    form_error($element, t('The :name option value should not be larger than 100.', array(
      ':name' => t($element['#title'])
    )));
  }
}

function _hologram_check_aspect($form, &$form_state){
  $aspect = $form_state['values']['instance']['widget']['settings']['aspect'];
  if($aspect){
    $aspect_value = explode('/', $form_state['values']['instance']['widget']['settings']['aspect']);

    if(count($aspect_value) !== 2){
      form_set_error('aspect', t('Aspect format should like: 16/9.'));
    }
  }
}

function hologram_field_attach_submit($entity_type, $entity, $form, &$form_state){
  $fields = field_info_instances($entity_type, isset($entity->type) ? $entity->type : NULL);
  if (isset($entity->type)) {
    _hologram_entity_presave($entity_type, $entity, $fields, $form_state);
  }else{
    foreach ($fields as $bundle) {
      _hologram_entity_presave($entity_type, $entity, $bundle, $form_state);
    }
  }
}

function _hologram_entity_presave($entity_type, $entity, $fields, $form_state) {
  $langcode = entity_language($entity_type, $entity);

  foreach ($fields as $field_name => $field) {
    if ($field['widget']['type'] != 'hologram_image') {
      continue;
    }
    if (!isset($entity->{$field_name})) {
      continue;
    }

    if(isset($form_state['values'][$field_name]['und']['value']['image_data'])){
      $langcode = 'und';
    }

    if (isset($form_state['values'][$field_name])
      && isset($form_state['values'][$field_name][$langcode])
      && (($images_data = $form_state['values'][$field_name][$langcode]['value']['image_data']) != ''))
    {
      $files = json_decode($images_data);
    } else {
      $files = array();
    }

    if(!empty($files)){
      foreach($files as $delta => $file){
        // if this is a new translation of a file
        if (!isset($entity->{$field_name}[$langcode][$delta])) {
          foreach ($entity->{$field_name} as $langvalue) {
            if (isset($langvalue[$delta])) {
              // copy field content from other language version first
              $entity->{$field_name}[$langcode][$delta] = $langvalue[$delta];
            }
            break;
          }
        }

        // assign value to current language
        $entity->{$field_name}[$langcode][$delta]['fid'] = $file->fid;
        if(isset($file->alt)){
          $entity->{$field_name}[$langcode][$delta]['alt'] = $file->alt;
        }
        if(isset($file->title)){
          $entity->{$field_name}[$langcode][$delta]['title'] = $file->title;
        }
      }
    }else{
      if(!$field['required']){
        unset($entity->{$field_name}[$langcode][0]['fid']);
      }
    }
  }
}

function _hologram_field_vaildate($element, &$form_state){
  global $language;
  $langcode = $language->language;
  $instance = $form_state['storage']['instance'];
  $field_name = $instance['field_name'];

  if($instance['required']){
    $image_data = $form_state['values'][$instance['field_name']][$langcode]['value']['image_data'];

    if(!empty($image_data)){
      $image_data_content = json_decode($image_data);
      if(empty($image_data_content)){
        form_error($element, t('@field_label field is required.', array('@field_label' => $instance['label'])));
      }
    }else{
      form_error($element, t('@field_label field is required.', array('@field_label' => $instance['label'])));
    }
  }
}

?>
