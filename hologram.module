<?php

/**
 * Implements hook_menu().
 */

function hologram_menu(){
    $items['hologram/upload'] = array(
        'page callback' => 'hologram_upload',
        'access arguments' => array('administer media'),
    );

    return $items;
}

function hologram_upload(){
    header('Content-type:application/json;charset=utf-8');
    $request = file_get_contents('php://input');
    $upload_path = variable_get('file_public_path', conf_path() . '/files');
    $file = json_decode($request);
    if($file){
        $data = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $file->preview));
        try{
            $file_data = file_save_data($data, 'public://' . $file->name, FILE_EXISTS_REPLACE);
            $uploaded_file = array('id'=> $file_data->fid, 'name' => $file->name, 'size' => $file->size, 'uploaded_date'=> (new DateTime())->getTimestamp());
            $_SESSION['uploaded_file'] = $uploaded_file;
            echo json_encode($uploaded_file, JSON_UNESCAPED_UNICODE);
        }catch(Exception $e){
            $result = array('message'=>'Upload Failed!', 'error' => $e);
            echo json_encode($result);
        }
    }
    exit();
}

/**
* Implements hook_field_widget_info().
*/
function hologram_field_widget_info(){
    return array(
        'hologram_image' => array(
            'label' => t('Hologram'),
            'field types' => array('image'),
        )
    );
}

/**
* Implements hook_field_widget_form().
*
*/
function hologram_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
    $upload_path = '/' . variable_get('file_public_path', conf_path() . '/files/');
    drupal_add_css(drupal_get_path('module', 'hologram') . '/hologram/dist/css/hologram.css');
    drupal_add_js(drupal_get_path('module', 'hologram') . '/hologram/dist/bundle.js');
    drupal_add_js(drupal_get_path('module', 'hologram') . '/js/widget.js');
    drupal_add_js(array('Hologram' => array('uploadUrl' => $upload_path)), array('type' => 'setting'));

    if(!empty($items)){
      $item_json = json_encode(array(array('key'=> $items[$delta]['fid'], 'name'=> $items[$delta]['filename'])));
    }

    $element['value'] = array(
      'image_json' => array(
        '#type' => 'hidden',
        '#default_value' => isset($item_json) ? $item_json : ''
      ),
      'hologram' => array(
        '#title' => t('Images'),
        '#type' => 'markup',
        '#markup' => '<div class="hologram-wrapper"><label>Images</label><div class="hologram-area"></div></div>',
      ),
    );

    return $element;
}

function hologram_entity_presave($entity, $type) {
  // HACK - until http://drupal.org/node/1448124 is addressed, the iamgesize
  // is stored in the field instance and we have no way of cleanly altering
  // it correctly, so do it here.
  //
  $fields = field_info_instances($type, isset($entity->type) ? $entity->type : NULL);
  if (isset($entity->type)) {
    _hologram_entity_presave($entity, $fields);
  }
  else {
    foreach ($fields as $bundle) {
      _hologram_entity_presave($entity, $bundle);
    }
  }
}

function _hologram_entity_presave($entity, $fields) {
  foreach ($fields as $field_name => $field) {
    if ($field['widget']['type'] != 'hologram_image') {
      continue;
    }
    if (!isset($entity->{$field_name})) {
      continue;
    }

    // Get the language key for the field, if fields language key is not
    // $entity->language set $lang to 'und'.

    $lang = LANGUAGE_NONE;
    if (isset($entity->language) && isset($entity->{$field_name}[$entity->language])) {
      $lang = $entity->language;
    }

    if(isset($_SESSION['uploaded_file'])){
      $uploaded_file = $_SESSION['uploaded_file'];
      $entity->{$field_name}[$lang][0]['fid'] = $uploaded_file['id'];
      unset($_SESSION['uploaded_file']);
    }else{
      unset($entity->{$field_name}[$lang][0]['fid']);
    }
  }
}

?>
