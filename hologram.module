<?php

/**
* Implements hook_menu().
*/

function hologram_menu(){
  $items['hologram/upload'] = array(
    'page callback' => 'hologram_upload',
    'access arguments' => array('administer media'),
  );

  return $items;
}

/**
* Implements files API of hologram widget.
*/

function hologram_upload(){
  header('Content-type:application/json;charset=utf-8');
  $request = file_get_contents('php://input');
  $file = json_decode($request);

  if($file){
    $data = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $file->preview));

    try{
      $file_data = file_save_data($data, 'public://' . $file->name, FILE_EXISTS_REPLACE);
      $uploaded_file = array(
        'key'=> $file->key,
        'fid'=> $file_data->fid,
        'name' => $file->name,
        'size' => $file->size,
        'uploaded_date'=> (new DateTime())->getTimestamp(),
      );
      echo json_encode($uploaded_file, JSON_UNESCAPED_UNICODE);
    }catch(Exception $e){
      $result = array('message'=>'Upload Failed!', 'error' => $e);
      echo json_encode($result);
    }
  }
  exit();
}

/**
* Implements hook_field_widget_info().
*/
function hologram_field_widget_info(){
  return array(
    'hologram_image' => array(
      'label' => t('Hologram'),
      'field types' => array('image'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    )
  );
}

/**
* Implements hook_field_widget_form().
*
*/
function hologram_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $upload_path = '/' . variable_get('file_public_path', conf_path() . '/files/');

  $extensions = explode(' ', $instance['settings']['file_extensions']);
  $extensions_setting = array();
  foreach($extensions as $extension){
    $extension = 'image/' . $extension;
    array_push($extensions_setting, $extension);
  }
  $extensions_setting = implode(',', $extensions_setting);

  if($instance['settings']['max_filesize']){
    $max_filesize = (int)$instance['settings']['max_filesize'];
    drupal_add_js(array('Hologram' => array('maxFileSize' => $max_filesize)), array('type' => 'setting'));
  }

  if($instance['widget']['settings']['min_width']){
    $min_width = (int)$instance['widget']['settings']['min_width'];
    drupal_add_js(array('Hologram' => array('minWidth' => $min_width)), array('type' => 'setting'));
  }

  if($instance['widget']['settings']['max_width']){
    $max_width = (int)$instance['widget']['settings']['max_width'];
    drupal_add_js(array('Hologram' => array('maxWidth' => $max_width)), array('type' => 'setting'));
  }

  if($instance['widget']['settings']['min_height']){
    $min_height = (int)$instance['widget']['settings']['min_height'];
    drupal_add_js(array('Hologram' => array('minHeight' => $min_height)), array('type' => 'setting'));
  }

  if($instance['widget']['settings']['max_height']){
    $max_height = (int)$instance['widget']['settings']['max_height'];
    drupal_add_js(array('Hologram' => array('maxHeight' => $max_height)), array('type' => 'setting'));
  }

  if($instance['widget']['settings']['max_height']){
    $max_height = (int)$instance['widget']['settings']['max_height'];
    drupal_add_js(array('Hologram' => array('maxHeight' => $max_height)), array('type' => 'setting'));
  }

  if($instance['widget']['settings']['aspect']){
    $aspect = explode('/', $instance['widget']['settings']['aspect']);
    $aspect = (int)$aspect[0] / (int)$aspect[1];
    drupal_add_js(array('Hologram' => array('aspect' => $aspect)), array('type' => 'setting'));
  }

  drupal_add_js(array('Hologram' => array('uploadUrl' => $upload_path)), array('type' => 'setting'));
  drupal_add_js(array('Hologram' => array('acceptType' => $extensions_setting)), array('type' => 'setting'));
  drupal_add_js(array('Hologram' => array('maxFiles' => (int)$field['cardinality'])), array('type' => 'setting'));
  drupal_add_js(array('Hologram' => array('enableAlt' => $instance['settings']['alt_field'])), array('type' => 'setting'));
  drupal_add_js(array('Hologram' => array('enableTitle' => $instance['settings']['title_field'])), array('type' => 'setting'));

  if(!empty($items)){
    $images = array();
    foreach($items as $item){
      $image = array('key'=> uniqid(), 'fid' => $item['fid'], 'name' => $item['filename']);
      if(isset($item['alt'])){
        $image['alt'] = $item['alt'];
        $image['title'] = $item['title'];
      }
      array_push($images, $image);
    }
    $item_json = json_encode($images);
  }

  $element['value'] = array(
    'image_data' => array(
      '#type' => 'hidden',
      '#default_value' => isset($item_json) ? $item_json : '',
      '#attributes' => array('id  ' => 'hologram-image-data'),
    ),
    'hologram' => array(
      '#title'=> $element['#title'],
      '#type' => 'markup',
      '#markup' => '<div class="hologram-wrapper"><label>' . $element['#title'] . '</label><div class="hologram-area"></div></div>',
    ),
  );

  return $element;
}

function hologram_field_widget_settings_form($field, $instance){
  $element = array(
    'min_width' => array(
      '#type' => 'textfield',
      '#title' => t('Minimum Crop Width'),
      '#description' => t('A minimum crop width, as a percentage of the image width.'),
      '#element_validate' => array('element_validate_integer_positive'),
      '#default_value' => isset($instance['widget']['settings']['min_width']) ? $instance['widget']['settings']['min_width'] : '',
    ),
    'max_width' => array(
      '#type' => 'textfield',
      '#title' => t('Max Crop Width'),
      '#description' => t('A maximum crop width, as a percentage of the image width.'),
      '#element_validate' => array('element_validate_integer_positive'),
      '#default_value' => isset($instance['widget']['settings']['max_width']) ? $instance['widget']['settings']['max_width'] : '',
    ),
    'min_height' => array(
      '#type' => 'textfield',
      '#title' => t('Minimum Crop Height'),
      '#description' => t('A minimum crop height, as a percentage of the image height.'),
      '#element_validate' => array('element_validate_integer_positive'),
      '#default_value' => isset($instance['widget']['settings']['min_height']) ? $instance['widget']['settings']['min_height'] : '',
    ),
    'max_height' => array(
      '#type' => 'textfield',
      '#title' => t('Max Crop Height'),
      '#description' => t('A maximum crop height, as a percentage of the image height.'),
      '#element_validate' => array('element_validate_integer_positive'),
      '#default_value' => isset($instance['widget']['settings']['max_height']) ? $instance['widget']['settings']['max_height'] : '',
    ),
   'aspect' => array(
     '#type' => 'textfield',
     '#title' => t('Aspect'),
     '#description' => t('The aspect of cropped image. Example: 16/9'),
     '#default_value' => isset($instance['widget']['settings']['aspect']) ? $instance['widget']['settings']['aspect'] : '',
   ),
 );
 return $element;
}

function hologram_field_attach_submit($entity_type, $entity, $form, &$form_state){
  $fields = field_info_instances($entity_type, isset($entity->type) ? $entity->type : NULL);
  if (isset($entity->type)) {
    _hologram_entity_presave($entity, $fields, $form_state);
  }else{
    foreach ($fields as $bundle) {
      _hologram_entity_presave($entity, $bundle, $form_state);
    }
  }
}

function _hologram_entity_presave($entity, $fields, $form_state) {
  global $language;
  $langcode = $language->language;

  foreach ($fields as $field_name => $field) {
    if ($field['widget']['type'] != 'hologram_image') {
      continue;
    }
    if (!isset($entity->{$field_name})) {
      continue;
    }

    if(isset($form_state['values'][$field_name]['und']['value']['image_data'])){
      $langcode = 'und';
    }

    $images_data = $form_state['values'][$field_name][$langcode]['value']['image_data'];

    if($images_data){
      $files = json_decode($images_data);
    }else{
      $files = array();
    }

    if(!empty($files)){
      foreach($files as $delta => $file){
        $entity->{$field_name}[$langcode][$delta]['fid'] = $file->fid;

        if(isset($file->alt)){
          $entity->{$field_name}[$langcode][$delta]['alt'] = $file->alt;
        }
        if(isset($file->title)){
          $entity->{$field_name}[$langcode][$delta]['title'] = $file->title;
        }
      }
    }else{
      unset($entity->{$field_name}[$langcode][0]['fid']);
    }
  }
}

?>
